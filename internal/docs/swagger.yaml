basePath: /api/v1
definitions:
  models.CreateUserRequest:
    properties:
      email:
        description: |-
          User's email (must be unique)
          required: true
          example: johndoe@example.com
        type: string
      name:
        description: |-
          User's full name
          required: true
          example: John Doe
        type: string
      password:
        description: |-
          User's password (will be hashed before saving)
          required: true
          example: password123
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        description: |-
          User's email
          example: johndoe@example.com
        type: string
      name:
        description: |-
          User's full name
          example: John Doe
        type: string
      password:
        description: |-
          User's password
          example: newpassword123
        type: string
    type: object
  models.UserResponse:
    properties:
      created_at:
        description: |-
          Timestamp when user was created
          example: 2025-09-06T12:34:56Z
        type: string
      email:
        description: |-
          User's email
          example: johndoe@example.com
        type: string
      id:
        description: |-
          User ID
          example: 1
        type: integer
      name:
        description: |-
          User's full name
          example: John Doe
        type: string
      updated_at:
        description: |-
          Timestamp when user was last updated
          example: 2025-09-06T12:34:56Z
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample API server with authentication
  title: github.com/simple-go-project API
  version: "1.0"
paths:
  /users:
    get:
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with name, email, and password
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user
      tags:
      - users
    get:
      description: Get details of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
